names(actdata)[names(actdata)=="Nights.lowmod"] <- "Nights of Low/ Moderate Activity"
names(actdata)[names(actdata)=="Nights.low"] <- "Nights of Low Activity"
library(knitr)
results='asis'#important to run this as it ensures the raw table output isn't processed further by knitr
datatable2<-actdata
emphasize.italics.cols(2) #second column needs to be in italics i.e. species names
panderOptions("table.split.table", Inf) #don't split table
pander(datatable2, style = 'rmarkdown', keep.line.breaks=TRUE)
library(plyr)
library(rcompanion)
con<-subset(wp, surv>=2) #subset dataset to only include records with more than one night of surveying
confint<-groupwiseMedian(percentile ~ sref + species, #code to get confidence intervals
data       = con,
conf       = 0.95,
R          = 1000,
wilcox =   TRUE,
bca        = FALSE,
digits     = 3)
confint <- transform(confint, Wilcox.lower = ifelse(Wilcox.lower == "NaN", Median, Wilcox.lower))
confint <- transform(confint, Wilcox.upper = ifelse(Wilcox.upper == "NaN", Median, Wilcox.upper))
mm<-merge(con, confint) #merge with subsetted dataset to put columns with the confidence intervals on the end
mm$confint = paste(mm$Wilcox.lower, mm$Wilcox.upper, sep=" - ") #add a new column with CIs merged
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
please<-rbind(mm, non) #join the two datasets back together
library(plyr) #ddply as normal
mdata2 <- ddply(please, c("location_name", "species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date), #returns how many nights of data in the dataset
Reference.range.size = mean(reference_range_size)) #returns reference range size - i used mean as it should be the
#same in each row because same species same location
names(mdata2)[names(mdata2)=="location_name"] <- "Location"
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
library(knitr)
library(pander)
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(2)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('right', 'left', 'centre', 'centre', 'centre', 'centre', 'centre'))
#boxplot if 1 location
if(loc=="1") {graphbox<-ggplot(wp, aes(x=species, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=species))+
xlab("\nSpecies")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90, face="italic", size=14, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=16),
legend.position="none")
graphbox}
#endcode for boxplot
## date ~ percentile graph if 1 location, >1 species
#if less than or equal to 21 days
if((difftime(max(wp$date),min(wp$date), units='days') <= 21) & loc=="1" & spn>1){
for (i in seq_len(n_pages1)) {
print(ggplot(wp, aes(x= date, y= percentile))+
geom_point(wp, size=3, shape=1,
mapping = aes(x=date, y= percentile, color=activity_level))+
xlab("\nNight")+ #set x-axis
ylab("Bat Activity Level (Percentile)\n")+
scale_colour_manual(values=cbbPalette, name="Activity\nLevel",
breaks=c("High","Moderate/High","Moderate",
"Low/Moderate","Low"))+
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
scale_x_date(name = "Date", date_breaks = "3 days", date_labels = "%d %b %Y")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90,size=16, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18)) +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
facet_grid_paginate(species ~ ., ncol=1, nrow=5, scales="fixed", page=i) +
theme(strip.text.y = element_text(size=16, face="italic")))
}
}
##end code for date graph
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#load packages
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
#insert file path file
#this is here so I can test the script before it's linked with the Shiny app
df <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Downloads/download.csv")
#insert file path file
#this is here so I can test the script before it's linked with the Shiny app
df <- read.csv("C:/Users/brs28/Downloads/download.csv")
cnames <- names(df)
cnames[grepl('location_name$', cnames)] <- 'location_name'
names(df) <- cnames
if(is.factor(df$date) == TRUE) {
df$date <- as.character(df$date)}
date<-parse_date_time(df$date,"ymd")
if(all(is.na(date))) {date<-parse_date_time(df$date,"dmy")}
nights<-length(unique(df$date)) #calculate number of nights recorded for
species<-length(unique(df$species)) #calculate number of species recorded
ldetector<-unique(df$detector_make) #pull the names of the detectors used
llocation<-unique(df$location_name) #pull the locations recorded at
lspecies<-unique(df$species) #list what species were recorded - potentially for graph legends later
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
greys <- c("#FFFFFF", "#999999", "#909090", "#888888", "#838383",  "#777777", "#747474", "#666666", "#656565") #set colour palette for boxplot fills
spl<-nlevels(df$species) #counts the number of species recorded. this actually does same as 'species'
df$location_name <- factor(df$location_name)
recordsum <- ddply(df, c("sref", "species"), summarise, #summarise to produce a measure of how many records each species has at each location to make graphs better
surv = length(species))
#now merge this back into the original csv - we don't want to delete any files at this stage
wp<- merge(df, recordsum, c("sref","species")) #merge with original dataset - adds surv column onto end of dataset
wp$date <- as.Date(wp$date, format = "%Y-%m-%d")
# old code if only using species recorded on >= 5 nights
# #wp<-subset(wp, surv >= 5) #subset to only include species with more than 5 records per location
#
# spn<-length(unique(wp$species)) #calculate how many species had more than 5 records per location
# loc<-length(unique(wp$sref)) #calculate how many locations the new subsetted dataframe
# lspecies<-(unique(wp$species)) #pull names of species from new subsetted dataframe
# date2<-as.Date(wp$date,format="%d/%m/%Y") #for date graphs later, convert date column into date objects
# if(is.na(date2)) {wp$date<-as.Date(wp$date)}
# wp$date<-parse_date_time(wp$date,"ymd")
# if(is.na(wp$date)) {wp$date<-parse_date_time(wp$date,"dmy")}
# date2<-parse_date_time(date2, "ymd")
# if(is.na(wp$date)) {wp$date<-date2}
# wp$date<-as.Date(wp$date)
spn<-length(unique(df$species))
loc<-length(unique(df$sref))
# calculate how many pages the dates graphs need splitting over by findng # how many unique combinations and dividing by 8 (the number of plots
# per page)
# for the dates graphs, when >1 loc & >1 spp
n_pages <- ceiling(nrow(unique(df[,c("species", "location_name")]))/8)
# when 1 loc & >1 spp
n_pages1 <- ceiling(nrow(unique(df[,c("species", "location_name")]))/5)
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
library(plyr)
actdata <- ddply(df, c("location_name", "species"), summarise,
Nights.high = sum(activity_level=="high"),
Nights.modhigh = sum(activity_level=="medium/high"),
Nights.mod = sum(activity_level=="medium"),
Nights.lowmod = sum(activity_level=="low/medium"),
Nights.low = sum(activity_level=="low"))
#rename columns
names(actdata)[names(actdata)=="location_name"] <- "Location"
names(actdata)[names(actdata)=="species"] <- "Species/Species Group"
names(actdata)[names(actdata)=="Nights.high"] <- "Nights of High Activity"
names(actdata)[names(actdata)=="Nights.modhigh"] <- "Nights of Moderate/ High Activity"
names(actdata)[names(actdata)=="Nights.mod"] <- "Nights of Moderate Activity"
names(actdata)[names(actdata)=="Nights.lowmod"] <- "Nights of Low/ Moderate Activity"
names(actdata)[names(actdata)=="Nights.low"] <- "Nights of Low Activity"
library(knitr)
results='asis'#important to run this as it ensures the raw table output isn't processed further by knitr
datatable2<-actdata
emphasize.italics.cols(2) #second column needs to be in italics i.e. species names
panderOptions("table.split.table", Inf) #don't split table
pander(datatable2, style = 'rmarkdown', keep.line.breaks=TRUE)
library(plyr)
library(rcompanion)
con<-subset(wp, surv>=2) #subset dataset to only include records with more than one night of surveying
confint<-groupwiseMedian(percentile ~ sref + species, #code to get confidence intervals
data       = con,
conf       = 0.95,
R          = 1000,
wilcox =   TRUE,
bca        = FALSE,
digits     = 3)
confint <- transform(confint, Wilcox.lower = ifelse(Wilcox.lower == "NaN", Median, Wilcox.lower))
confint <- transform(confint, Wilcox.upper = ifelse(Wilcox.upper == "NaN", Median, Wilcox.upper))
mm<-merge(con, confint) #merge with subsetted dataset to put columns with the confidence intervals on the end
mm$confint = paste(mm$Wilcox.lower, mm$Wilcox.upper, sep=" - ") #add a new column with CIs merged
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
please<-rbind(mm, non) #join the two datasets back together
library(plyr) #ddply as normal
mdata2 <- ddply(please, c("location_name", "species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date), #returns how many nights of data in the dataset
Reference.range.size = mean(reference_range_size)) #returns reference range size - i used mean as it should be the
#same in each row because same species same location
names(mdata2)[names(mdata2)=="location_name"] <- "Location"
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
library(knitr)
library(pander)
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(2)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('right', 'left', 'centre', 'centre', 'centre', 'centre', 'centre'))
#boxplot if 1 location
if(loc=="1") {graphbox<-ggplot(wp, aes(x=species, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=species))+
xlab("\nSpecies")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90, face="italic", size=14, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=16),
legend.position="none")
graphbox}
#endcode for boxplot
#boxplot if 2-5 location but only one species
if(loc>=2 & loc<=5 & spn=="1") {graphboxb<-ggplot(wp, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(wp, mapping = aes(fill=location_name))+
xlab("\nLocation name")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")
graphboxb}
#endcode for boxplot
## date ~ percentile graph if 2-5 locations + >1 species
#less than or equal to 21 days
if((difftime(max(wp$date),min(wp$date), units='days')<=21) & loc>=2 & loc<=5 & spn>1) {
for (i in seq_len(n_pages)) {
print(ggplot(wp, aes(x= date, y= percentile))+
geom_point(wp, size=3, shape=1,
mapping = aes(x=wp$date, y= percentile, color=activity_level))+
xlab("\nNight")+ #set x-axis
ylab("Bat Activity Level (Percentile)\n")+
scale_colour_manual(values=cbbPalette, name="Activity\nLevel",
breaks=c("High","Moderate/High","Moderate",
"Low/Moderate","Low"))+
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
scale_x_date(name = "Date", date_breaks = "1 week", date_labels = "%d %b %Y")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90,size=16, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18)) +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
facet_wrap_paginate(species ~ location_name, ncol=2, nrow=4, scales="fixed", page=i) +
theme(strip.text.y = element_text(size=16, face="italic"),
strip.text.x = element_text(size=16)))
}
}
wp$date
recordsum <- ddply(df, c("sref", "species"), summarise, #summarise to produce a measure of how many records each species has at each location to make graphs better
surv = length(species))
#now merge this back into the original csv - we don't want to delete any files at this stage
wp<- merge(df, recordsum, c("sref","species")) #merge with original dataset - adds surv column onto end of dataset
View(wp)
wp$date <- as.Date(wp$date, format = "%d/%m/%Y")
## date ~ percentile graph if 2-5 locations + >1 species
#less than or equal to 21 days
if((difftime(max(wp$date),min(wp$date), units='days')<=21) & loc>=2 & loc<=5 & spn>1) {
for (i in seq_len(n_pages)) {
print(ggplot(wp, aes(x= date, y= percentile))+
geom_point(wp, size=3, shape=1,
mapping = aes(x=wp$date, y= percentile, color=activity_level))+
xlab("\nNight")+ #set x-axis
ylab("Bat Activity Level (Percentile)\n")+
scale_colour_manual(values=cbbPalette, name="Activity\nLevel",
breaks=c("High","Moderate/High","Moderate",
"Low/Moderate","Low"))+
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
scale_x_date(name = "Date", date_breaks = "1 week", date_labels = "%d %b %Y")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90,size=16, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18)) +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
facet_wrap_paginate(species ~ location_name, ncol=2, nrow=4, scales="fixed", page=i) +
theme(strip.text.y = element_text(size=16, face="italic"),
strip.text.x = element_text(size=16)))
}
}
#end code for date graph
#load packages
library(shiny)
runApp()
install.packages("rsconnect")
install.packages("rsconnect")
install.packages("shiny")
install.packages("shiny")
install.packages("tinytex")
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#load packages
library(rmarkdown)
library(ggplot2)
library(knitr)
library(pander)
library(plyr)
library(rcompanion)
library(tidyr)
library(lubridate)
library(ggforce)
#insert file path file
#this is here so I can test the script before it's linked with the Shiny app
df <- read.csv("C:/Users/brs28/Downloads/download.csv")
#insert file path file
#this is here so I can test the script before it's linked with the Shiny app
df <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Downloads/download.csv")
cnames <- names(df)
cnames[grepl('location_name$', cnames)] <- 'location_name'
names(df) <- cnames
if(is.factor(df$date) == TRUE) {
df$date <- as.character(df$date)}
date<-parse_date_time(df$date,"ymd")
if(all(is.na(date))) {date<-parse_date_time(df$date,"dmy")}
nights<-length(unique(df$date)) #calculate number of nights recorded for
species<-length(unique(df$species)) #calculate number of species recorded
ldetector<-unique(df$detector_make) #pull the names of the detectors used
llocation<-unique(df$location_name) #pull the locations recorded at
lspecies<-unique(df$species) #list what species were recorded - potentially for graph legends later
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
greys <- c("#FFFFFF", "#999999", "#909090", "#888888", "#838383",  "#777777", "#747474", "#666666", "#656565") #set colour palette for boxplot fills
spl<-nlevels(df$species) #counts the number of species recorded. this actually does same as 'species'
df$location_name <- factor(df$location_name)
View(df)
recordsum <- ddply(df, c("sref", "species"), summarise, #summarise to produce a measure of how many records each species has at each location to make graphs better
surv = length(species))
#now merge this back into the original csv - we don't want to delete any files at this stage
wp<- merge(df, recordsum, c("sref","species")) #merge with original dataset - adds surv column onto end of dataset
wp$date <- as.Date(wp$date, format = "%d/%m/%Y")
# old code if only using species recorded on >= 5 nights
# #wp<-subset(wp, surv >= 5) #subset to only include species with more than 5 records per location
#
# spn<-length(unique(wp$species)) #calculate how many species had more than 5 records per location
# loc<-length(unique(wp$sref)) #calculate how many locations the new subsetted dataframe
# lspecies<-(unique(wp$species)) #pull names of species from new subsetted dataframe
# date2<-as.Date(wp$date,format="%d/%m/%Y") #for date graphs later, convert date column into date objects
# if(is.na(date2)) {wp$date<-as.Date(wp$date)}
# wp$date<-parse_date_time(wp$date,"ymd")
# if(is.na(wp$date)) {wp$date<-parse_date_time(wp$date,"dmy")}
# date2<-parse_date_time(date2, "ymd")
# if(is.na(wp$date)) {wp$date<-date2}
# wp$date<-as.Date(wp$date)
spn<-length(unique(df$species))
loc<-length(unique(df$sref))
# calculate how many pages the dates graphs need splitting over by findng # how many unique combinations and dividing by 8 (the number of plots
# per page)
# for the dates graphs, when >1 loc & >1 spp
n_pages <- ceiling(nrow(unique(df[,c("species", "location_name")]))/8)
# when 1 loc & >1 spp
n_pages1 <- ceiling(nrow(unique(df[,c("species", "location_name")]))/5)
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
View(wp)
cnames <- names(df)
cnames[grepl('location_name$', cnames)] <- 'location_name'
names(df) <- cnames
if(is.factor(df$date) == TRUE) {
df$date <- as.character(df$date)}
date<-parse_date_time(df$date,"ymd")
if(all(is.na(date))) {date<-parse_date_time(df$date,"dmy")}
nights<-length(unique(df$date)) #calculate number of nights recorded for
species<-length(unique(df$species)) #calculate number of species recorded
ldetector<-unique(df$detector_make) #pull the names of the detectors used
llocation<-unique(df$location_name) #pull the locations recorded at
lspecies<-unique(df$species) #list what species were recorded - potentially for graph legends later
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
greys <- c("#FFFFFF", "#999999", "#909090", "#888888", "#838383",  "#777777", "#747474", "#666666", "#656565") #set colour palette for boxplot fills
spl<-nlevels(df$species) #counts the number of species recorded. this actually does same as 'species'
df$location_name <- factor(df$location_name)
recordsum <- ddply(df, c("sref", "species"), summarise, #summarise to produce a measure of how many records each species has at each location to make graphs better
surv = length(species))
#now merge this back into the original csv - we don't want to delete any files at this stage
wp<- merge(df, recordsum, c("sref","species")) #merge with original dataset - adds surv column onto end of dataset
#wp$date <- as.Date(wp$date, format = "%d/%m/%Y")
# old code if only using species recorded on >= 5 nights
# #wp<-subset(wp, surv >= 5) #subset to only include species with more than 5 records per location
#
# spn<-length(unique(wp$species)) #calculate how many species had more than 5 records per location
# loc<-length(unique(wp$sref)) #calculate how many locations the new subsetted dataframe
# lspecies<-(unique(wp$species)) #pull names of species from new subsetted dataframe
# date2<-as.Date(wp$date,format="%d/%m/%Y") #for date graphs later, convert date column into date objects
# if(is.na(date2)) {wp$date<-as.Date(wp$date)}
# wp$date<-parse_date_time(wp$date,"ymd")
# if(is.na(wp$date)) {wp$date<-parse_date_time(wp$date,"dmy")}
# date2<-parse_date_time(date2, "ymd")
# if(is.na(wp$date)) {wp$date<-date2}
# wp$date<-as.Date(wp$date)
spn<-length(unique(df$species))
loc<-length(unique(df$sref))
# calculate how many pages the dates graphs need splitting over by findng # how many unique combinations and dividing by 8 (the number of plots
# per page)
# for the dates graphs, when >1 loc & >1 spp
n_pages <- ceiling(nrow(unique(df[,c("species", "location_name")]))/8)
# when 1 loc & >1 spp
n_pages1 <- ceiling(nrow(unique(df[,c("species", "location_name")]))/5)
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
library(plyr)
actdata <- ddply(df, c("location_name", "species"), summarise,
Nights.high = sum(activity_level=="high"),
Nights.modhigh = sum(activity_level=="medium/high"),
Nights.mod = sum(activity_level=="medium"),
Nights.lowmod = sum(activity_level=="low/medium"),
Nights.low = sum(activity_level=="low"))
#rename columns
names(actdata)[names(actdata)=="location_name"] <- "Location"
names(actdata)[names(actdata)=="species"] <- "Species/Species Group"
names(actdata)[names(actdata)=="Nights.high"] <- "Nights of High Activity"
names(actdata)[names(actdata)=="Nights.modhigh"] <- "Nights of Moderate/ High Activity"
names(actdata)[names(actdata)=="Nights.mod"] <- "Nights of Moderate Activity"
names(actdata)[names(actdata)=="Nights.lowmod"] <- "Nights of Low/ Moderate Activity"
names(actdata)[names(actdata)=="Nights.low"] <- "Nights of Low Activity"
library(knitr)
results='asis'#important to run this as it ensures the raw table output isn't processed further by knitr
datatable2<-actdata
emphasize.italics.cols(2) #second column needs to be in italics i.e. species names
panderOptions("table.split.table", Inf) #don't split table
pander(datatable2, style = 'rmarkdown', keep.line.breaks=TRUE)
runApp()
