results='asis'#important to run this as it ensures the raw table output isn't processed further by knitr
datatable2<-actdata
emphasize.italics.cols(2) #second column needs to be in italics i.e. species names
panderOptions("table.split.table", Inf) #don't split table
pander(datatable2, style = 'rmarkdown', keep.line.breaks=TRUE)
if (mean(wp$surv) >= 2) {
con<-subset(wp, surv>=2) #subset dataset to only include records with more than one night of surveying
confint<-groupwiseMedian(percentile ~ location_name + Spp, #code to get confidence intervals
data       = con,
conf       = 0.95,
R          = 1000,
wilcox =   TRUE,
bca        = FALSE,
digits     = 3)
confint <- transform(confint, Wilcox.lower = ifelse(Wilcox.lower == "NaN", Median, Wilcox.lower))
confint <- transform(confint, Wilcox.upper = ifelse(Wilcox.upper == "NaN", Median, Wilcox.upper))
mm<-merge(con, confint) #merge with subsetted dataset to put columns with the confidence intervals on the end
mm$confint = paste(mm$Wilcox.lower, mm$Wilcox.upper, sep=" - ") #add a new column with CIs merged
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
please<-rbind(mm, non) #join the two datasets back together
library(plyr) #ddply as normal
mdata2 <- plyr::ddply(please, c("location_name", "species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date), #returns how many nights of data in the dataset
Reference.range.size = mean(reference_range_size)) #returns reference range size - i used mean as it should be the
#same in each row because same species same location
names(mdata2)[names(mdata2)=="location_name"] <- "Detector ID"
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
library(knitr)
library(pander)
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(2)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('right', 'left', 'centre', 'centre', 'centre', 'centre', 'centre'))
}
if (mean(wp$surv) == 1) {
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
library(plyr) #ddply as normal
mdata2 <- plyr::ddply(non, c("location_name", "species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date), #returns how many nights of data in the dataset
Reference.range.size = mean(reference_range_size)) #returns reference range size - i used mean as it should be the
#same in each row because same species same location
names(mdata2)[names(mdata2)=="location_name"] <- "Detector ID"
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
library(knitr)
library(pander)
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(2)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('right', 'left', 'centre', 'centre', 'centre', 'centre', 'centre'))
}
#boxplot if 1 location
if(loc=="1") {graphbox<-ggplot(df, aes(x=Spp, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=species))+
xlab("Species")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90, face="italic", size=14, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=16),
legend.position="none")
graphbox}
#endcode for boxplot
#boxplot if 2-5 location but only one species
if(loc>2 & loc<5 & spn=="1") {graphboxb<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")
graphboxb}
#endcode for boxplot
#boxplot if 2-5 location and more one species
if(loc>2 & loc<5 & spn>1) {graphboxb<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16, angle=90, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxb}
#endcode for boxplot
#boxplot if more than 5 location and one species
if(loc>=5 & spn=="1") {graphboxc<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16, angle=90, vjust=0, hjust=1),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxc}
#endcode for boxplot
#boxplot if more than or equal to 5 but less than 10 location and more than one species
if(loc>=5 & loc<10 & spn>"1") {graphboxc<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16, angle=90, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxc}
#endcode for boxplot
#boxplot if more than 10 locations and more than one species
if(loc>10 & spn>"1") {graphboxc<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("\nDetector ID")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=10, angle=90, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxc}
#endcode for boxplot
Table <- df %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::summarise(n = sum(passes)) %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
for (i in seq_len(length(unique(All_data$location_name)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(Spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~location_name, ncol=1, nrow=1, page=i))
}
Table <- df %>%
dplyr::filter(post_set_min <= upper)
View(Table)
View(df)
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::summarise(n = sum(passes)) %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
results='asis'
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::summarise(n = sum(passes)) %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
View(All_data)
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::count() %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(rmarkdown)
library(knitr) # needed for rmarkdown
library(dplyr) # used for all data wrangling (execpt percentiles)
library(plyr) # percentiles code uses plyr as its older (needs updating)
library(suncalc) # Suntimes
library(lubridate) # best package for working with dates and times
library(ggplot2) # plotting graphs
library(ggforce) # needed for facet_wrap_paginate for plotting graphs on diff pages
library(pander) # useful for table creation in the markdown doc
library(reshape2) # used for wide/short data format conversions
library(janitor) # used to add totals rows to bottoms of tables
library(RColorBrewer) # used for colourblind friendly colour scales on figures
library(rcompanion)
library(png)
library(grid)
# TESTING - load in test data
#B_data <- read.csv("../Data/RiggedHill.csv")
B_data <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Downloads/Frith results.csv")
#B_data <- read.csv("./test_data.csv")
#B_data <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Desktop/download.csv")
runApp('Z:/Mammal Society/Ecobat/Apps/Percentiles/App-2')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(rmarkdown)
library(knitr) # needed for rmarkdown
library(dplyr) # used for all data wrangling (execpt percentiles)
library(plyr) # percentiles code uses plyr as its older (needs updating)
library(suncalc) # Suntimes
library(lubridate) # best package for working with dates and times
library(ggplot2) # plotting graphs
library(ggforce) # needed for facet_wrap_paginate for plotting graphs on diff pages
library(pander) # useful for table creation in the markdown doc
library(reshape2) # used for wide/short data format conversions
library(janitor) # used to add totals rows to bottoms of tables
library(RColorBrewer) # used for colourblind friendly colour scales on figures
library(rcompanion)
library(png)
library(grid)
# TESTING - load in test data
#B_data <- read.csv("../Data/RiggedHill.csv")
B_data <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Downloads/COMBINED DOWNLOAD.csv")
#B_data <- read.csv("./test_data.csv")
#B_data <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Desktop/download.csv")
shiny::runApp()
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(rmarkdown)
library(knitr) # needed for rmarkdown
library(dplyr) # used for all data wrangling (execpt percentiles)
library(plyr) # percentiles code uses plyr as its older (needs updating)
library(suncalc) # Suntimes
library(lubridate) # best package for working with dates and times
library(ggplot2) # plotting graphs
library(ggforce) # needed for facet_wrap_paginate for plotting graphs on diff pages
library(pander) # useful for table creation in the markdown doc
library(reshape2) # used for wide/short data format conversions
library(janitor) # used to add totals rows to bottoms of tables
library(RColorBrewer) # used for colourblind friendly colour scales on figures
library(rcompanion)
library(png)
library(grid)
#B_data <- read.csv("./test_data.csv")
B_data <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Downloads/large_data.csv")
# Standardize Variables@
# Output CSV from Ecobat puts weird symbol in front of location name, so need to remove:
cnames <- names(B_data)
cnames[grepl('location_name$', cnames)] <- 'location_name'
names(B_data) <- cnames
# if there is a separate column for date and time then join together to form a new column called Timestamp
if (("date" %in% colnames(B_data) == TRUE) &
("time" %in% colnames(B_data) == TRUE)) {
B_data$timestamp <- paste(B_data$date, B_data$time) }
# format correctly and specify timezone
# "Europe/London" accounts for daylight savings
B_data$DateTime <- lubridate::ymd_hms(B_data$timestamp, tz = "Europe/London")
# if above code gives NA, date format is dmy not ymd so do this:
if (NA %in% B_data$DateTime) {
B_data$DateTime <- lubridate::dmy_hms(B_data$timestamp, tz = "Europe/London")
}
# Create Useful Variables
# `Night` date at dusk
# `Month` month of observation `Jan, Feb, Mar....`
# `JustTime` time hh:mm of bat observation (12 hours added so plots correctly as `Night` i.e. dusk to dawn)
B_data2 <- B_data %>%
mutate(Night = DateTime - lubridate::hours(12)) %>% # DateTime minus 12 hours
mutate(Night = lubridate::as_date(Night)) %>%
mutate(Month = lubridate::month(Night, label = T)) %>% # Make Month of observation
filter(!is.na(species))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(rmarkdown)
library(knitr) # needed for rmarkdown
library(dplyr) # used for all data wrangling (execpt percentiles)
library(plyr) # percentiles code uses plyr as its older (needs updating)
library(suncalc) # Suntimes
library(lubridate) # best package for working with dates and times
library(ggplot2) # plotting graphs
library(ggforce) # needed for facet_wrap_paginate for plotting graphs on diff pages
library(pander) # useful for table creation in the markdown doc
library(reshape2) # used for wide/short data format conversions
library(janitor) # used to add totals rows to bottoms of tables
library(RColorBrewer) # used for colourblind friendly colour scales on figures
library(rcompanion)
library(png)
library(grid)
# TESTING - load in test data / data that needs troubleshooting
# this should be hashtagged out when
#B_data <- read.csv("./test_data.csv")
B_data <- read.csv("//smbhome.uscs.susx.ac.uk/brs28/Downloads/large_data.csv")
# Standardize Variables@
# Output CSV from Ecobat puts weird symbol in front of location name, so need to remove:
cnames <- names(B_data)
cnames[grepl('location_name$', cnames)] <- 'location_name'
names(B_data) <- cnames
# if there is a separate column for date and time then join together to form a new column called Timestamp
if (("date" %in% colnames(B_data) == TRUE) &
("time" %in% colnames(B_data) == TRUE)) {
B_data$timestamp <- paste(B_data$date, B_data$time) }
# format correctly and specify timezone
# "Europe/London" accounts for daylight savings
B_data$DateTime <- lubridate::ymd_hms(B_data$timestamp, tz = "Europe/London")
# if above code gives NA, date format is dmy not ymd so do this:
if (NA %in% B_data$DateTime) {
B_data$DateTime <- lubridate::dmy_hms(B_data$timestamp, tz = "Europe/London")
}
# Create Useful Variables
# `Night` date at dusk
# `Month` month of observation `Jan, Feb, Mar....`
# `JustTime` time hh:mm of bat observation (12 hours added so plots correctly as `Night` i.e. dusk to dawn)
B_data2 <- B_data %>%
mutate(Night = DateTime - lubridate::hours(12)) %>% # DateTime minus 12 hours
mutate(Night = lubridate::as_date(Night)) %>%
mutate(Month = lubridate::month(Night, label = T)) %>% # Make Month of observation
filter(!is.na(species))
# Create suntimes
# Use package `suncalcs` to make `sunset` and `sunrise` columns for each `Night` and the location (`lat` and `lon`) of the bat survey.
# Get number nights between first and last bat observation (plus 1 for dawn)
num_nights <- as.integer(difftime(max(B_data2$Night) ,
min(B_data2$Night) ,
units = c("days"))) + 1
# Make a date vector of nights between first and last bat observation.
nightlist <- seq.Date(from=min(B_data2$Night),
length.out = num_nights +1,
by='days')
View(B_data2)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('Z:/Mammal Society/Ecobat/Apps/Percentiles/App-2')
runApp('Z:/Mammal Society/Ecobat/Apps/Percentiles/App-2')
runApp('Z:/Mammal Society/Ecobat/Apps/Percentiles/App-2')
