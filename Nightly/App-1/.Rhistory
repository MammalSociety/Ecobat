"Myotis brandtii",
"Myotis daubentonii",
"Myotis mystacinus",
"Myotis nattereri",
"Myotis",
"Nyctalus leisleri",
"Nyctalus noctula",
"Nyctalus",
"Nyctaloid",
"Pipistrellus nathusii",
"Pipistrellus pipistrellus",
"Pipistrellus pygmaeus",
"Pipistrellus",
"Plecotus auritus",
"Plecotus austriacus",
"Plecotus",
"Rhinolophus ferrumequinum",
"Rhinolophus hipposideros",
"Rhinolophus")
Spp <- c("Barbastelle",
"Serotine",
"Serotine",
"Alcathoe",
"Bechstein's",
"Brandt's",
"Daubenton's",
"Whiskered",
"Natterer's",
"Myotis",
"Leisler's",
"Noctule",
"Nyctalus",
"Nyctaloid",
"Nathusius'",
"Common pipistrelle",
"Soprano pipistrelle",
"Pipistrellus",
"Brown long-eared",
"Grey long-eared",
"Long-eared bats",
"Greater horseshoe",
"Lesser horseshoe",
"Horseshoe bats")
# create a table of roost emergence times for each species
lower <- c(25, 20, 20, 30, 30, 30, 50, 30, 35, 30, 8, 5, 5, 5, 18, 22, 22, 18, 40, 40, 40, 35, 35, 35)
upper <- c(60, 25, 25, 35, 33, 35, 70, 35, 55, 70, 18, 9, 18, 25, 28, 32, 28, 32, 60, 60, 60, 48, 50, 50)
russ <- tibble(species, Spp, lower, upper)
#Join with Jon Russ data with bat observation data All_data
All_data <- dplyr::left_join(All_data, russ, by = "species")
# add a column for bat passes per hour
All_data$passes.per.hour <- round((All_data$passes/All_data$night_length_hr),
digits = 2)
# create lists to be used for tables and graphs later:
# list of all of the unique locations in the dataset
Dets <- c(unique(All_data$location_name))
# list of all of the different species in the dataset
species_list <- unique(All_data$species)
Spp_list <- unique(All_data$Spp)
# dataframe of survey days
Surv.days <- as.data.frame(unique(All_data$Night)) #all unique survey nights
Surv.days.N <- length(Surv.days$`unique(All_data$Night)`) #count of survey nights
Surv.days.M <- Surv.days %>%
mutate(Month = lubridate::month((unique(All_data$Night)), label = T)) %>%
dplyr::count(Month) #count of survey days per month
colourCount <- length(unique(All_data$Spp))
getPalette <- colorRampPalette(brewer.pal(9, "RdBu"))
# specify order for the species to be listed in
All_data$Spp <- factor(All_data$Spp,levels=c("Pipistrellus", "Common pipistrelle", "Soprano pipistrelle", "Nathusius'", "Noctule", "Leisler's", "Nyctalus", "Serotine", "Nyctaloid", "Brown long-eared", "Grey long-eared", "Long-eared bats", "Myotis","Alcathoe", "Bechstein's",  "Brandt's", "Daubenton's","Whiskered", "Natterer's", "Barbastelle", "Greater horseshoe", "Lesser horseshoe", "Horseshoe bats"))
Table <- All_data %>%
dplyr::select(location_name, lat, lon) %>%
dplyr::group_by(location_name, lat, lon) %>%
dplyr::distinct() %>%
dplyr::rename("Detector ID" = location_name, "Latitude" = lat,
"Longitude" = lon)
knitr::kable(Table, align = "l")
Table <- All_data %>%
dplyr::group_by(location_name) %>%
dplyr::summarise(count = n_distinct(Night)) %>%
dplyr::arrange(location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("No. of nights" = count)
knitr::kable(Table, align = "l")
Effort <- All_data %>%
dplyr::arrange(location_name, Night) %>%
dplyr::group_by(location_name, Night) %>%
dplyr::filter(row_number()==1) %>%
dplyr::ungroup() %>%
dplyr::select(location_name, Night) %>%
dplyr::group_by(location_name) %>%
dplyr::mutate(diff_days = round(as.numeric(difftime(Night, lag(Night), units='days')), digits = 1)) %>%
replace(is.na(.), 0) %>%
dplyr::mutate(start = if_else(diff_days == 0 | diff_days > 1, paste(as.Date(Night)), "")) %>%
dplyr::mutate(end = if_else(start != "", paste(lag(as.Date(Night))), "")) %>%
dplyr::mutate(end = ifelse(row_number()==n(), paste(as.Date(Night)), end)) %>%
dplyr::filter(start != "" | end != "") %>%
dplyr::mutate_at(c("end"), funs(lead), n=1) %>%
replace(is.na(.), 0) %>%
dplyr::mutate_at(c("end"), funs(ifelse(. == 0, paste(as.Date(start)), .))) %>%
dplyr::filter(end != "NA")
Effort$start <- as.Date(Effort$start)
Effort$end <- as.Date(Effort$end)
Effort$location_name <- as.character(Effort$location_name)
Effort %>%
ggplot() +
geom_segment(aes(x=start, xend=end, y=location_name, yend=location_name), size = 4) +
geom_point(aes(start, location_name), colour = "black",  shape = 16, size = 3.6) +
geom_point(aes(end, location_name),  colour = "black", shape = 16, size = 3.6) +
xlab("\nDate") +
ylab("Detector ID\n") +
scale_x_date(date_labels = "%b %d") +
theme_bw() +
theme(legend.position = "none") +
theme (axis.title.y = element_text(colour="black", size=16,
face="bold")) +
theme (axis.title.x = element_text(colour="black", size=16,
face="bold")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black",
linetype="solid")) +
theme(axis.text.x = element_text(size=14, hjust=1, vjust=0.5,
colour = "black", angle = 90)) +
theme(axis.text.y = element_text(size = 14, colour = "black")) +
theme(legend.text=element_text(size=14)) +
theme(legend.title=element_text(size=16))
# PERCENTILES
# only select one of each group and remove time, this leaves a df where each row is a nightly summary
df <- All_data %>%
dplyr::group_by(location_name, Night, Spp) %>%
dplyr::top_n(1) %>%
filter(row_number()==1) %>%
dplyr::select(-time)
df$location_name <- as.character(df$location_name)
recordsum <- ddply(df, c("location_name", "Spp"), summarise,
surv = length(species))
#now merge this back into the original csv - we don't want to delete any files at this stage
wp <- merge(df, recordsum, c("location_name","Spp")) #merge with original dataset - adds surv column onto end of dataset
spn<-length(unique(df$Spp))
loc<-length(unique(df$location_name))
locs<-length(unique(df$site_name))
# for the dates graphs, when >1 loc & >1 spp
n_pages <- ceiling(nrow(unique(df[,c("species", "location_name")]))/8)
# when 1 loc & >1 spp
n_pages1 <- ceiling(nrow(unique(df[,c("species", "location_name")]))/5)
n_pages2 <- ceiling(nrow(unique(df[,c("species")]))/4)
cbbPalette <- c("#D55E00", "#0072B2","#56B4E9","#009E73","#E69F00") #set colour palette for graphs
library(plyr)
actdata <- plyr::ddply(df, c("location_name", "species"), summarise,
Nights.high = sum(activity_level=="high"),
Nights.modhigh = sum(activity_level=="medium/high"),
Nights.mod = sum(activity_level=="medium"),
Nights.lowmod = sum(activity_level=="low/medium"),
Nights.low = sum(activity_level=="low"))
#rename columns
names(actdata)[names(actdata)=="location_name"] <- "Detector ID"
names(actdata)[names(actdata)=="species"] <- "Species/Species Group"
names(actdata)[names(actdata)=="Nights.high"] <- "Nights of High Activity"
names(actdata)[names(actdata)=="Nights.modhigh"] <- "Nights of Moderate/ High Activity"
names(actdata)[names(actdata)=="Nights.mod"] <- "Nights of Moderate Activity"
names(actdata)[names(actdata)=="Nights.lowmod"] <- "Nights of Low/ Moderate Activity"
names(actdata)[names(actdata)=="Nights.low"] <- "Nights of Low Activity"
library(knitr)
results='asis'#important to run this as it ensures the raw table output isn't processed further by knitr
datatable2<-actdata
emphasize.italics.cols(2) #second column needs to be in italics i.e. species names
panderOptions("table.split.table", Inf) #don't split table
pander(datatable2, style = 'rmarkdown', keep.line.breaks=TRUE)
if (mean(wp$surv) >= 2) {
con<-subset(wp, surv>=2) #subset dataset to only include records with more than one night of surveying
confint<-groupwiseMedian(percentile ~ location_name + Spp, #code to get confidence intervals
data       = con,
conf       = 0.95,
R          = 1000,
wilcox =   TRUE,
bca        = FALSE,
digits     = 3)
confint <- transform(confint, Wilcox.lower = ifelse(Wilcox.lower == "NaN", Median, Wilcox.lower))
confint <- transform(confint, Wilcox.upper = ifelse(Wilcox.upper == "NaN", Median, Wilcox.upper))
mm<-merge(con, confint) #merge with subsetted dataset to put columns with the confidence intervals on the end
mm$confint = paste(mm$Wilcox.lower, mm$Wilcox.upper, sep=" - ") #add a new column with CIs merged
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
please<-rbind(mm, non) #join the two datasets back together
library(plyr) #ddply as normal
mdata2 <- plyr::ddply(please, c("location_name", "species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date), #returns how many nights of data in the dataset
Reference.range.size = mean(reference_range_size)) #returns reference range size - i used mean as it should be the
#same in each row because same species same location
names(mdata2)[names(mdata2)=="location_name"] <- "Detector ID"
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
library(knitr)
library(pander)
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(2)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('right', 'left', 'centre', 'centre', 'centre', 'centre', 'centre'))
}
if (mean(wp$surv) == 1) {
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
library(plyr) #ddply as normal
mdata2 <- plyr::ddply(non, c("location_name", "species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date), #returns how many nights of data in the dataset
Reference.range.size = mean(reference_range_size)) #returns reference range size - i used mean as it should be the
#same in each row because same species same location
names(mdata2)[names(mdata2)=="location_name"] <- "Detector ID"
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
library(knitr)
library(pander)
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(2)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('right', 'left', 'centre', 'centre', 'centre', 'centre', 'centre'))
}
#boxplot if 1 location
if(loc=="1") {graphbox<-ggplot(df, aes(x=Spp, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=species))+
xlab("Species")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90, face="italic", size=14, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=16),
legend.position="none")
graphbox}
#endcode for boxplot
#boxplot if 2-5 location but only one species
if(loc>2 & loc<5 & spn=="1") {graphboxb<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")
graphboxb}
#endcode for boxplot
#boxplot if 2-5 location and more one species
if(loc>2 & loc<5 & spn>1) {graphboxb<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16, angle=90, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxb}
#endcode for boxplot
#boxplot if more than 5 location and one species
if(loc>=5 & spn=="1") {graphboxc<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16, angle=90, vjust=0, hjust=1),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxc}
#endcode for boxplot
#boxplot if more than or equal to 5 but less than 10 location and more than one species
if(loc>=5 & loc<10 & spn>"1") {graphboxc<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("Detector ID")+
ylab("Bat Activity Level (Percentile)")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=16, angle=90, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxc}
#endcode for boxplot
#boxplot if more than 10 locations and more than one species
if(loc>10 & spn>"1") {graphboxc<-ggplot(df, aes(x=location_name, y=percentile))+ #add lines first
geom_hline(aes(yintercept=0), linetype="dashed", color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed", color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed", color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed", color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed", color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=location_name))+
xlab("\nDetector ID")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=FALSE) +
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black", linetype="solid"),
axis.line=element_line(size=0.5, colour="black", linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(size=10, angle=90, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=18),
legend.position="none")+
facet_wrap( ~ species, ncol=3) +
theme(strip.text.x = element_text(size=16, face="italic"))
graphboxc}
#endcode for boxplot
Table <- df %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::summarise(n = sum(passes)) %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
for (i in seq_len(length(unique(All_data$location_name)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(Spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~location_name, ncol=1, nrow=1, page=i))
}
Table <- df %>%
dplyr::filter(post_set_min <= upper)
View(Table)
View(df)
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::summarise(n = sum(passes)) %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
results='asis'
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::summarise(n = sum(passes)) %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
View(All_data)
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::count() %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
