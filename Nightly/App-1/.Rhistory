medtable2<-mdata2
emphasize.italics.cols(1)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('centre', 'centre', 'centre', 'centre', 'centre'))
}
if (mean(wp$surv) == 1) {
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
mdata2 <- plyr::ddply(non, c("species"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date)) #returns how many nights of data in the dataset
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(1)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('centre', 'centre', 'centre', 'centre', 'centre'))
}
#boxplot if 1 location
graphbox<-ggplot(df, aes(x=Spp, y=percentile)) +
geom_hline(aes(yintercept=0), linetype="dashed",
color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed",
color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed",
color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed",
color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed",
color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=species))+
xlab("\nSpecies")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=TRUE) +
scale_y_continuous(breaks=seq(0,100,20)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(linetype="blank"),
axis.line=element_line(size=0.5, colour="black",
linetype="solid"),
axis.title.x=element_text(size=18),
axis.text.x  = element_text(angle=90, face="italic",
size=14, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=16),
legend.position="none")
graphbox
# get the site-wide medians
df$percentiles <- as.numeric(df$percentile)
medians <- df %>%
dplyr::select(location_name, Night, Spp, percentiles,
activity_level, species) %>%
dplyr::group_by(Night, Spp) %>%
dplyr::mutate(med = median(percentiles)) %>%
dplyr::arrange(Night)
## baseplot for medians across all detectors
median_baseplot <- function (df, breaks) {
graph_medians <- ggplot(medians, aes(x = Night,
y = (median(med)))) +
geom_point(medians, size=3, shape=1,
mapping = aes(x=Night, y= med,
color=activity_level))+
ylab("Median Bat Activity Level\n")+
scale_colour_manual(values=cbbPalette, name="Activity\nLevel",
breaks=c("High","Moderate/High","Moderate",
"Low/Moderate","Low"))+
scale_y_continuous(breaks=seq(0,100,20), limits=c(0,100)) +
scale_x_date(name = "\nDate", date_breaks = breaks,
date_labels = "%d %b %Y")+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black",
linetype="solid"),
axis.line=element_line(size=0.5, colour="black",
linetype="solid"),
axis.title.x=element_text(size=14),
axis.text.x  = element_text(angle=90,size=12,
hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=14)) +
geom_hline(aes(yintercept=20), linetype="dashed",
color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed",
color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed",
color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed",
color="#E69F00")
return(graph_medians)
}
## if time difference less than 21 days - breaks = 3 days
# 1 location, 1 species
if(timediff<=21 & locs=="1" & spn=="1") {
median_baseplot(medians, "3 days")
}
# 1 location, >1 species
if(timediff<=21 & locs=="1" & spn>1) {
for (i in seq_len(n_pages2)) {
print(median_baseplot(medians, "3 days") +
facet_grid_paginate(species ~ ., ncol=1, nrow=4,
scales="fixed", page=i) +
theme(strip.text.y = element_text(size=12,
face="italic")))
}
}
## if time difference is between 21 and 50 days - breaks = 1 week
# 1 location, 1 species
if(timediff>21 & timediff<50 & locs=="1" & spn=="1") {
median_baseplot(medians, "1 week")
}
# 1 location, >1 species
if(timediff>21 & timediff<50 & locs=="1" & spn>1) {
for (i in seq_len(n_pages2)) {
print(median_baseplot(medians, "1 week")  +
facet_grid_paginate(species ~ ., ncol=1, nrow=4,
scales="fixed", page=i) +
theme(strip.text.y = element_text(size=12,
face="italic")))
}
}
# if time diff between 50 and 300 days - breaks = 3 weeks
# 1 location, 1 species
if(timediff>50 & timediff<300 & locs=="1" & spn=="1") {
median_baseplot(medians, "3 weeks")
}
# 1 location, >1 species
if(timediff>50 & timediff<300 & locs=="1" & spn>1) {
for (i in seq_len(n_pages2)) {
print(median_baseplot(medians, "3 weeks") +
facet_grid_paginate(species ~ ., ncol=1, nrow=4,
scales="fixed", page=i) +
theme(strip.text.y = element_text(size=12,
face="italic")))
}
}
# if data spans more than a year - breaks - 12 weeks
# 1 location, 1 species
if(timediff>=300 & locs=="1" & spn=="1"){
median_baseplot(medians, "12 weeks")
}
# 1 location, >1 species
if(timediff>=300 & locs=="1" & spn>1) {
for (i in seq_len(n_pages2)) {
print(median_baseplot(medians, "12 weeks") +
facet_grid_paginate(species ~ ., ncol=1, nrow=4,
scales="fixed", page=i) +
theme(strip.text.y = element_text(size=12,
face="italic")))
}
}
actdata <- plyr::ddply(df, c("species", "Month"), summarise,
Nights.high = sum(activity_level=="high"),
Nights.modhigh = sum(activity_level=="medium/high"),
Nights.mod = sum(activity_level=="medium"),
Nights.lowmod = sum(activity_level=="low/medium"),
Nights.low = sum(activity_level=="low"))
#rename columns
names(actdata)[names(actdata)=="species"] <- "Species/Species Group"
names(actdata)[names(actdata)=="Nights.high"] <- "Nights of High Activity"
names(actdata)[names(actdata)=="Nights.modhigh"] <- "Nights of Moderate/ High Activity"
names(actdata)[names(actdata)=="Nights.mod"] <- "Nights of Moderate Activity"
names(actdata)[names(actdata)=="Nights.lowmod"] <- "Nights of Low/ Moderate Activity"
names(actdata)[names(actdata)=="Nights.low"] <- "Nights of Low Activity"
results='asis'#important to run this as it ensures the raw table output isn't processed further by knitr
datatable2<-actdata
emphasize.italics.cols(1) #second column needs to be in italics i.e. species names
panderOptions("table.split.table", Inf) #don't split table
pander(datatable2, style = 'rmarkdown', keep.line.breaks=TRUE)
if (mean(wp$surv) >= 2) {
con<-subset(wp, surv>=2) #subset dataset to only include records with more than one night of surveying
confint<-groupwiseMedian(percentile ~ location_name + Spp, #code to get confidence intervals
data       = con,
conf       = 0.95,
R          = 1000,
wilcox =   TRUE,
bca        = FALSE,
digits     = 3)
confint <- transform(confint, Wilcox.lower = ifelse(Wilcox.lower == "NaN", Median, Wilcox.lower))
confint <- transform(confint, Wilcox.upper = ifelse(Wilcox.upper == "NaN", Median, Wilcox.upper))
mm<-merge(con, confint) #merge with subsetted dataset to put columns with the confidence intervals on the end
mm$confint = paste(mm$Wilcox.lower, mm$Wilcox.upper, sep=" - ") #add a new column with CIs merged
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
please<-rbind(mm, non) #join the two datasets back together
mdata2 <- plyr::ddply(please, c("species", "Month"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date)) #returns how many nights of data in the dataset
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
names(mdata2)[names(mdata2)=="Reference.range.size"] <- "Reference Range"
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(1)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('centre', 'centre', 'centre', 'centre', 'centre', 'centre'))
}
if (mean(wp$surv) ==1) {
non<-subset(wp,surv=="1") #subset dataset to only include records with one night of surveying
if(nrow(non)>0) {
non$n <- 0 #add empty columns to enable merger
non$Median <- 0
non$Wilcox.upper <- 0
non$Wilcox.lower <- 0
non$confint <- 0}
mdata2 <- plyr::ddply(non, c("species", "Month"), summarise,
Median.percentile = ceiling(median(percentile)),#finds median percentile
conf = max(confint),
Highest.perc = max(percentile), #returns max percentiles
Number.nights = length(date)) #returns how many nights of data in the dataset
names(mdata2)[names(mdata2)=="species"] <- "Species/Species Group"
names(mdata2)[names(mdata2)=="Median.percentile"] <- "Median Percentile"
names(mdata2)[names(mdata2)=="conf"] <- "95% CIs"
names(mdata2)[names(mdata2)=="Highest.perc"] <- "Max Percentile"
names(mdata2)[names(mdata2)=="Number.nights"] <- "Nights Recorded"
results='asis' #important to run this as it ensures the raw table output isn't processed further by knitr
medtable2<-mdata2
emphasize.italics.cols(1)
panderOptions("table.split.table", Inf)
panderOptions("table.split.cells", Inf)
pander(medtable2, style = 'multiline', keep.line.breaks=TRUE,justify = c('centre', 'centre', 'centre', 'centre', 'centre', 'centre'))
}
for (i in seq_len(n_pages_months)){
print(ggplot(df, aes(x=Spp, y=percentile)) +
geom_hline(aes(yintercept=0), linetype="dashed",
color="#000000") +
geom_hline(aes(yintercept=20), linetype="dashed",
color="#0072B2") +
geom_hline(aes(yintercept=40), linetype="dashed",
color="#56B4E9") +
geom_hline(aes(yintercept=60), linetype="dashed",
color="#009E73") +
geom_hline(aes(yintercept=80), linetype="dashed",
color="#E69F00") +
geom_boxplot(df, mapping = aes(fill=species)) +
xlab("\nSpecies")+
ylab("Bat Activity Level (Percentile)\n")+
scale_fill_grey(start = 0.35, end = 1)+
scale_x_discrete(drop=TRUE) +
scale_y_continuous(breaks=seq(0,100,20)) +
expand_limits(y=c(0,100))+
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black",
linetype="solid"),
axis.line=element_line(size=0.5, colour="black",
linetype="solid"),
axis.title.x=element_text(size=14),
axis.text.x  = element_text(angle=90, face="italic",
size=12, hjust=1, vjust=0),
axis.text.y  = element_text(size=12),
axis.line.x = element_line(color="black", size = 0.5),
axis.line.y = element_line(color="black", size = 0.5),
axis.title.y=element_text(size=14),
legend.position="none") +
facet_grid_paginate(Month ~ ., ncol=1, nrow=4,
scales="fixed", page=i) +
theme(strip.text.y = element_text(size=12, face="italic")))
}
## in this bit of code we have to 'infer zeros' on nights when some species were recorded but not others. So spread the data out and include 0s where NAs. Just run through each line one at a time if you need to understand better what's happening here.
df_spr <- df %>%
dplyr::select(location_name, lat, lon, Night, Spp,
passes.per.hour) %>%
spread(Spp, passes.per.hour)
df_gath <- df_spr %>%
gather("Spp", "passes.per.hour", 5:(length(Spp_list)+4)) %>%
replace(is.na(.), 0) %>%
arrange(location_name, Night, Spp)
df_z <- df_gath %>%
mutate(Month = lubridate::month(Night, label = T))
df_z2 <- dplyr::left_join(df_z, russ, by = "Spp")
df_passes <- df %>%
select(Spp, Night, location_name, passes)
df_z3 <- dplyr::left_join(df_z2, df_passes,
by = c("Night", "location_name",
"Spp"))
df_zero <- df_z3 %>%
replace(is.na(.), 0)
df_zero$Month <- as.character(df_zero$Month)
Table <- All_data %>%
select(Night, sunset, sunrise) %>%
distinct() %>%
mutate(night_length = round(as.numeric(difftime(sunrise, sunset, units='hours')), digits = 1),
sunset = stringr::str_sub(as.character(sunset), 11, 16),
sunrise = stringr::str_sub(as.character(sunrise), 11, 16)) %>%
arrange(Night)
colnames(Table) <- c("Night (y-m-d)", "Sunset (hh:mm)", "Sunrise (hh:mm)", "Night Length (hours)")
knitr::kable(Table, align = "cccc")
for (i in seq_len(n_pages_sploc)) {
print(ggplot(All_data, aes(Night, post_set_min)) +
stat_density2d(aes(alpha = ..level.., fill =..level..),
geom="polygon") +
scale_fill_gradient(low = "yellow", high = "red") +
geom_point(size=2, alpha = 0.5) +
geom_line(data = sun_data, aes(Night, night_length_min),
linetype = "dashed", colour = "red") +
xlab("\nDate") +
ylab("Minutes after sunset\n") +
theme_bw() +
theme(legend.position = "none") +
theme(axis.title.y = element_text(colour="black", size=18,
face="bold")) +
theme(axis.title.x = element_text(colour="black", size=18,
face="bold")) +
theme(strip.text.x = element_text(size=18, face="bold")) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_rect(colour="black",
linetype="solid"),
axis.line=element_line(size=0.5, colour="black",
linetype="solid")) +
theme(axis.text.x = element_text(angle=90, size=16, hjust=1,
vjust=0.5,
colour = "black")) +
theme(axis.text.y = element_text(size = 16,
colour = "black")) +
facet_wrap_paginate(species ~location_name, ncol=2, nrow=3,
scales="fixed", page=i) +
theme(strip.text.x = element_text(size=12,
face="italic")))
}
Table <- All_data %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::count() %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp)
# Make all NA's = 0
Table[is.na(Table)] <- 0
# simple table
results='asis'
panderOptions('table.split.table', 100)
pander(Table, style = "multiline", justify = "left")
for (i in seq_len(length(unique(All_data$location_name)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(Spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme(axis.ticks = element_blank()) +
facet_wrap_paginate(~location_name, ncol=1, nrow=1, page=i))
}
#### MATERNITY PERIOD ####
# need to repeat the above tables/graphs for the maternity period (15th June - 30th July) - but only if the survey was conducted over these days, so first we need to see if these dates are included in the data:
# add a column for Day-Month to be used to see if maternity period is included or not
# ADDS CURRENT YEAR AS YEAR SO NEEDS CHANGING IN GGPLOT CODE BELOW AT THE TURN OF EACH NEW YEAR
All_data$month <- lubridate::month(All_data$Night)
All_data$nday <- lubridate::day(All_data$Night)
All_data$Day <- as.Date(paste(All_data$nday, All_data$month, sep = "-"), format = "%d-%m") #misses year so puts the current year in
# create a vector of dates that fall within the maternity period
# remember to change the year to 2020 in the new year!!
matern_days <- seq(as.Date("2019-06-15"), as.Date("2019-07-30"), by="days")
# then we can say, if any of the maternity dates feature in the Day column of the dataframe, then we have data from within the maternity period so make a new table and graphs, if not, give a message there's no data within this period
if (any(matern_days %in% All_data$Day)) {
Maternity <- All_data %>%
dplyr::filter(Day >= "2019-06-15" & Day <= "2019-07-30") %>%
dplyr::filter(post_set_min <= upper) %>%
dplyr::group_by(Night, Spp, location_name) %>%
dplyr::count() %>%
spread(Night, n) %>%
dplyr::arrange(Spp, location_name) %>%
dplyr::rename("Detector ID" = location_name) %>%
dplyr::rename("Species" = Spp) %>%
replace(is.na(.), 0)
}
if (exists("Maternity") == TRUE){
if (any(is.na(Maternity$Species)) == FALSE) {
results='asis'
panderOptions('table.split.table', 100)
pander(Maternity, style = "multiline", justify = "left")
}
}
#NEEDS CHANGING EACH YEAR - so add 2020 on 01/01/2020 and 2021 on 01/01/2021 etc (due to the code 2 chunks above)
matern_data <- All_data %>%
dplyr::filter(Day >= "2019-06-15" & Day <= "2019-07-30")
if (any(matern_days %in% All_data$Day)) {
for (i in seq_len(length(unique(matern_data$location_name)))) {
print(matern_data %>%
ggplot(aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,
position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(Spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black",
size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~location_name, nrow=1, ncol=1, page=i))
}
}
# Aggregate data into species and count
Table <- df %>%
dplyr::group_by(Spp) %>%
dplyr::summarise(passes = sum(passes)) %>%
dplyr::mutate(Percentage = round((passes / sum(passes) *100),
digits = 1)) %>%
adorn_totals("row")
#Change column Names so more meaningful
colnames(Table) <- c("Species", "Passes (No.)",
"Percentage of total (%)")
# kable is a simple table generator
knitr::kable(Table, align = "lcc")
View(df)
View(df_passes)
View(df_z2)
View(Table)
# Aggregate data into species and count
Table <- df %>%
dplyr::group_by(Spp) %>%
dplyr::summarise(passes = sum(passes)) %>%
dplyr::mutate(Percentage = round((passes / sum(passes) *100, digits = 1),
unique(Table&Spp)
unique(df$Spp)
Test1 <- df_z2 %>%
filter(Spp == "Common pipstrelle", "Soprano pipstrelle",
"Pipstrelle")
Test1 <- df_z2 %>%
filter(Spp == "Common pipstrelle" | Spp == "Soprano pipstrelle"|
Spp == "Pipstrelle")
sum(Test1$passes.per.hour)
View(Table)
View(Test1)
unique(df_z2$Spp)
Test1 <- df_z2 %>%
filter(Spp == "Common pipistrelle" | Spp == "Soprano pipistrelle"|
Spp == "Pipistrellus")
sum(Test1$passes.per.hour)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
