rename(ss_hr = variable, Passes = value) %>%
arrange(Spp, Detector.ID, ss_hr) %>%
group_by(Spp, Detector.ID) %>%
mutate(cs = cumsum(Passes))
for (i in (unique(All_data$Spp))) {
print(Table3 %>%
filter(Spp == i) %>%
ggplot(aes(x = ss_hr, y = cs, group =1)) +
geom_point() +
geom_line() +
xlab("\nHours after Sunset") +
ylab("Total number of passes\n") +
scale_color_brewer(palette = "RdBu") +
theme_bw() +
theme (axis.title.y = element_text(colour="black", size=22,
face="bold")) +
theme (axis.title.x = element_text(colour="black", size=22,
face="bold")) +
theme(strip.text.x = element_text(size=22, face="bold")) +
theme(axis.text.x = element_text(size=20, hjust=1, vjust=1,
colour = "black")) +
theme(axis.text.y = element_text(size = 20, colour = "black")) +
facet_wrap(~Detector.ID) +
ggtitle(i) +
theme(plot.title = element_text(face = "bold.italic", size = 22))
)
}
Table <- All_data %>%
group_by(Spp, Detector.ID, post_set_hr_int) %>%
count() %>%
spread(post_set_hr_int, n) %>%
replace(is.na(.), 0)
Table2 <- melt(Table)
Table3 <- Table2 %>%
rename(ss_hr = variable, Passes = value) %>%
arrange(Spp, Detector.ID, ss_hr) %>%
group_by(Spp, Detector.ID) %>%
mutate(cs = cumsum(Passes))
for (i in (unique(All_data$Spp))) {
print(Table3 %>%
filter(Spp == i) %>%
ggplot(aes(x = ss_hr, y = cs, group =1)) +
geom_point() +
geom_line() +
xlab("\nHours after Sunset") +
ylab("Total number of passes\n") +
scale_color_brewer(palette = "RdBu") +
theme_bw() +
theme (axis.title.y = element_text(colour="black", size=22,
face="bold")) +
theme (axis.title.x = element_text(colour="black", size=22,
face="bold")) +
theme(strip.text.x = element_text(size=22, face="bold")) +
theme(axis.text.x = element_text(size=20, hjust=0, vjust=1,
colour = "black")) +
theme(axis.text.y = element_text(size = 20, colour = "black")) +
facet_wrap(~Detector.ID) +
ggtitle(i) +
theme(plot.title = element_text(face = "bold.italic", size = 22))
)
}
Table <- All_data %>%
group_by(Spp, Detector.ID, post_set_hr_int) %>%
count() %>%
spread(post_set_hr_int, n) %>%
replace(is.na(.), 0)
Table2 <- melt(Table)
Table3 <- Table2 %>%
rename(ss_hr = variable, Passes = value) %>%
arrange(Spp, Detector.ID, ss_hr) %>%
group_by(Spp, Detector.ID) %>%
mutate(cs = cumsum(Passes))
for (i in (unique(All_data$Spp))) {
print(Table3 %>%
filter(Spp == i) %>%
ggplot(aes(x = ss_hr, y = cs, group =1)) +
geom_point() +
geom_line() +
xlab("\nHours after Sunset") +
ylab("Total number of passes\n") +
scale_color_brewer(palette = "RdBu") +
theme_bw() +
theme (axis.title.y = element_text(colour="black", size=22,
face="bold")) +
theme (axis.title.x = element_text(colour="black", size=22,
face="bold")) +
theme(strip.text.x = element_text(size=22, face="bold")) +
theme(axis.text.x = element_text(size=20, colour = "black")) +
theme(axis.text.y = element_text(size = 20, colour = "black")) +
facet_wrap(~Detector.ID) +
ggtitle(i) +
theme(plot.title = element_text(face = "bold.italic", size = 22))
)
}
# create a list of all of the different species
spp_list <- unique(All_data$Spp)
xLab <- "\nTime after sunset (mins)"
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
labs(x = xLab) +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=FALSE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
# create a list of all of the different species
spp_list <- unique(All_data$Spp)
xLab <- "\nTime after sunset (mins)"
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(All_data, aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
labs(x = xLab) +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=FALSE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
# create a list of all of the different species
spp_list <- unique(All_data$Spp)
xLab <- "\nTime after sunset (mins)"
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=All_data$Spp, yend=All_data$Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
labs(x = xLab) +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=FALSE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
All_data$Spp
if ((is.element("15-Jun", sun_data$Day) == TRUE) || (is.element("30-Jul", sun_data$Day) == TRUE)) {
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(All_data %>%
filter(Day >= "2019-06-15" & Day <= "2019-07-30") %>% #NEEDS CHANGING EACH YEAR!
ggplot(aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=FALSE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
}
if ((is.element("15-Jun", sun_data$Day) == TRUE) || (is.element("30-Jul", sun_data$Day) == TRUE)) {
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(All_data %>%
filter(Day >= "2019-06-15" & Day <= "2019-07-30") %>% #NEEDS CHANGING EACH YEAR!
ggplot(aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=FALSE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
}
if ((is.element("15-Jun", sun_data$Day) == TRUE) || (is.element("30-Jul", sun_data$Day) == TRUE)) {
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(All_data %>%
filter(Day >= "2019-06-15" & Day <= "2019-07-30") %>% #NEEDS CHANGING EACH YEAR!
ggplot(aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
xlab("\nTime after sunset (mins)") +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
}
# create a list of all of the different species
spp_list <- unique(All_data$Spp)
xLab <- "\nTime after sunset (mins)"
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=All_data$Spp, yend=All_data$Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
labs(x = xLab) +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
# create a list of all of the different species
spp_list <- unique(All_data$Spp)
xLab <- "\nTime after sunset (mins)"
for (i in seq_len(length(unique(All_data$Detector.ID)))) {
print(ggplot(All_data, aes(x=post_set_min, y=Spp, colour=Spp)) +
geom_segment(aes(x=lower, xend=upper, y=Spp, yend=Spp),
size = 25, colour="grey") +
geom_point(size=5, alpha=0.7,  position = position_jitter(height = 0.3)) +
labs(x = xLab) +
scale_x_continuous(breaks=c(-15, 0, 15, 30, 45, 60, 75, 90),
limits = c(-15, 90)) +
geom_hline(yintercept = c(seq_len(length(spp_list)-1) + 0.5),
colour = "black", linetype = "dotted") +
scale_y_discrete(drop=TRUE) +
scale_colour_brewer(palette = "Paired") +
theme_bw() +
theme(legend.position = "none") +
theme(plot.caption = element_text(colour = "black", size = 34)) +
theme(strip.text.x = element_text(size=34, face="bold")) +
theme(axis.title.y = element_blank()) +
theme(axis.title.x = element_text(colour = "black", size = 34,
face = "bold")) +
theme(axis.text.x = element_text(size = 28, hjust=0.5, vjust=1,
colour = "black",
face = "bold")) +
theme(axis.text.y = element_text(size = 28, colour = "black",
face = "bold.italic")) +
theme(panel.background = element_rect(fill = "white")) +
theme(panel.grid.major.x = element_line(colour = "black",
linetype = "dotted"),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()) +
theme (axis.ticks = element_blank()) +
facet_wrap_paginate(~Detector.ID, ncol=1, nrow=1, page=i))
}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(dplyr)
library(suncalc) # Suntimes
library(knitr)
library(lubridate) # best package for working with dates and times
library(ggplot2)
library(ggforce) # needed for facet_wrap_paginate for plotting graphs on diff pages
library(pander)
library(reshape2) # used for wide/short data format conversions
library(png)
library(grid)
library(janitor) # used to add totals rows to bottoms of tables
library(RColorBrewer) # used for colourblind friendly colour scales on figures
shiny::runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Shiny_Apps/App-2')
shiny::runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
shiny::runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message=FALSE, comment=NULL)
#Libraries used
library(tidyverse) # Enables a consistent approach to data science
library(dplyr)
library(suncalc) # Suntimes
library(knitr)
library(lubridate) # best package for working with dates and times
library(ggplot2)
library(ggforce) # needed for facet_wrap_paginate for plotting graphs on diff pages
library(pander)
library(reshape2) # used for wide/short data format conversions
library(png)
library(grid)
library(janitor) # used to add totals rows to bottoms of tables
library(RColorBrewer) # used for colourblind friendly colour scales on figures
# # for testing purposes - load in test data
setwd("//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight)
# # for testing purposes - load in test data
setwd("//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight")
#for testing purposes - load in test data
setwd("//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/WithinNight")
B_data <- read.csv("../Data/RiggedHill.csv")
help(reference_intermediates_generator)
??reference_intermediates_generator
library(rmarkdown)
library(rmarkdown)
??reference_intermediates_generator
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
word_document <- function(toc = FALSE,
toc_depth = 3,
fig_width = 5,
fig_height = 4,
fig_caption = TRUE,
df_print = "default",
smart = TRUE,
highlight = "default",
reference_docx = "stylesdoc.docx",
keep_md = FALSE,
md_extensions = NULL,
pandoc_args = NULL) {
# reference docx
args <- c(args, reference_doc_args("docx", reference_docx))
saved_files_dir <- NULL
pre_processor <- function(metadata, input_file, runtime, knit_meta, files_dir, output_dir) {
saved_files_dir <<- files_dir
NULL
}
intermediates_generator <- function(...) {
reference_intermediates_generator(saved_files_dir, ..., reference_docx)
}
# return output format
output_format(
knitr = knitr,
pandoc = pandoc_options(to = "docx",
from = from_rmarkdown(fig_caption, md_extensions),
args = args),
keep_md = keep_md,
df_print = df_print,
pre_processor = pre_processor,
intermediates_generator = intermediates_generator
)
}
reference_doc_args <- function(type, doc) {
if (is.null(doc) || identical(doc, "default")) return()
c(paste0("--reference-", if (pandoc2.0()) "doc" else {
match.arg(type, c("docx", "odt", "doc"))
}), pandoc_path_arg(doc))
}
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
install.packages("pandoc")
install.pandoc()
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
shiny::runApp('//smbhome.uscs.susx.ac.uk/brs28/Desktop/MammalSociety/Ecobat/Ecobat/Nightly/App-1')
